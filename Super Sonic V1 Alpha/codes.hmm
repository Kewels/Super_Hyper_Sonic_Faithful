Code "Codes" in "Gameplay" by "Kewels"
//
    #include "ReflectionHelpers" noemit

    #lib "SonicParameters"
    #lib "HMM"
    #lib "INI"
	#lib "Sonic"
	#lib "Reflection"
	#lib "BlackboardBattle"
	#lib "XInput"
    #lib "Lua"
	#lib "MathHelpers"
    #lib "Player"
	#lib "Time"
	#lib "GameData"
    #lib "GameManager"
	#lib "Memory"
	#lib "Win32"
	
	#import "GOComponents"
    #import "PlayerVisuals"
	#import "Collections"
    #import "Services"
	
	#load "System.Numerics.dll"
	
	using System;
	using System.IO;
	using System.Diagnostics;
    using System.Numerics;
    using System.Runtime.InteropServices;
	using System.Threading;
	using System.Threading.Tasks;
	using System.Timers;
	
    static bool initialized = false;
    static bool attackActive = false;
	static bool vibrationOn = false;
    static bool auraActive = false;
	static bool disableDamage = false;
	static bool hyperFlash = false;
	static bool hyperFlashDamage = false;
	static bool hyperFlashWhiteOut = false;
	static bool hyperFlashExplosion = false;
	static bool hyperStomp = false;
	static bool hyperStompExtendDamage = false;
	static bool instantStomp = false;
	static bool hyperSpinDash = false;
	static bool hyperStompCameraShake = false;
	static bool hyperFlashCameraShake = false;
	static bool hyperFlashCheckNew = false;
	static bool hyperFlashWhitePlayed = false;
	static bool hyperSpinBoostCamera = false;
	static bool hyperSpinBoostChargeCamera = false;
	static bool trailOn = false;
	static bool burstTrailOn = false;
	static bool flashFade = false;
	static bool meteor = false;
	static bool flightBool = false;
	static bool hyperStandingBurst = false;
	static bool hyperStandingBurstCheck = false;
	static bool hyperLock = false;
	static bool chaosMeteor = false;
	static bool transImpactDamage = false;
	static bool freeDiveCheck = false;
	static bool driftAirBoost = false;
	static bool superAuraFix = false;
	static bool chargeSFX = false;
	static bool idle01fix = false;
	static bool spinBoostChargeCheck = false;
	static bool burstWaveCharged = false;
	static bool hyperBurstWaveCheck = false;
	static bool isBase = true;
	static bool isHyper = false;
	static bool isSuper = false;
	static bool isNotBossSuper = true;
	static bool isBossHyper = false;
	static bool baseCrashFix = false;
	static bool superSonicGPU = false;
	static bool driftAirBoostCheck = false;
	static bool particleBoostLimiter = false;
	static bool particleBoostLimiter2 = false;
	static bool boostSFXPlayed = false;
	static bool damageToggle = true;
	static bool pauseCheck = false;
	static bool isPaused = true;
	
	static bool flashFix = false;
	static bool flashFix2 = false;
	static bool flashFixJump = false;
	static bool meteorFix = false;
	static bool meteorDamageConflictFix = false;
	static bool meteorDamageHelper = false;
	static bool hyperTrans = true
	static bool disableMeteor = false;
	static bool _flashLockOn = false;
	static bool _flashLockOn2 = false;
	static bool _flashLockOn3 = false;
	static bool _flashLockOn4 = false;
	static bool meteorHelper = false;
	static bool rushDecrease = false;
	static bool _isConfigInitialised = false;
	static bool _isStompBeginPositionPreserved = false;
	static bool flightCheck = false;
	static bool flightAnimCheck = false;
	static bool flightStompCheck = false;
	static bool jumpFlightCheck = false;
	static bool jumpFlightCheckHelper = false;
	static bool dummy = false;
	static bool meteorDamage = false;
	static bool doubleJumpFlyCheck = false;
	static bool parryCheck = false;
	static bool damageCheck = false;
	
	private static bool fadeInOutTriggered = false;
	private static bool effectsPlayed = false
	private static bool soundPlayed= false;
	private static bool meteorDashActivated = false;
	private static bool auraEffectsPlayed = false;
	private static bool burst02WaveActivated = false;
	
	private static DateTime lastPauseTime = DateTime.MinValue;
	private static TimeSpan pauseCooldown = TimeSpan.FromSeconds(0.9);
	
    static string currentModDirectory;
	static string _auraMode;
	static string _auraMode1;
	static string _openCyloopMode;
	
	static float _radius = 0.01f;
	
	
	#include "Reflection" noemit
	#include "BlackboardStatus" noemit

    #import "States"
	

// Move PlayAuraEffects and StopAuraEffects outside the second code block

static void PlayAuraEffects(GameManager.Data* gameManager)
{
    // Play aura effects
    Player.Sound.PlaySound("sn_ss_change");
    Player.Effect.PlayEffect("aura", "ec_ss_aura01_burst01_moya1");
    Player.Effect.PlayEffect("aura", "ec_evcmn_ss_aura01_event_burst_spiral01");
    Player.Effect.PlayEffect("aura", "ec_evcmn_ss_aura01_event_burst_spiral02");
    Player.Effect.PlayEffect("aura", "ec_ss_aura01_burst01_glow01");
    Player.Effect.PlayEffect("aura", "ec_ss_aura01_burst01_gpu01");
    Player.Effect.PlayEffect("aura", "ec_ss_aura01_burst01_spiral01");
    Player.Effect.PlayEffect("aura", "ec_ss_aura01_burst01_spiral02");
}

static void StopAuraEffects(GameManager.Data* gameManager)
{
    // Stop aura effects
    Player.Effect.StopEffect("ec_ss_aura01_burst01_moya1");
    Player.Effect.StopEffect("ec_evcmn_ss_aura01_event_burst_spiral01");
    Player.Effect.StopEffect("ec_evcmn_ss_aura01_event_burst_spiral02");
    Player.Effect.StopEffect("ec_ss_aura01_burst01_glow01");
    Player.Effect.StopEffect("ec_ss_aura01_burst01_gpu01");
    Player.Effect.StopEffect("ec_ss_aura01_burst01_spiral01");
    Player.Effect.StopEffect("ec_ss_aura01_burst01_spiral02");
}

// Main logic
var gameManager = GameManager.Get();

if (gameManager != null)
{
    // Check Super Sonic status and play/stop aura effects accordingly
    if (BlackboardStatus.IsSuper() && !auraEffectsPlayed)
    {
        PlayAuraEffects(gameManager);
        auraEffectsPlayed = true;
    }
    else if (!BlackboardStatus.IsSuper() && auraEffectsPlayed)
    {
        StopAuraEffects(gameManager);
        auraEffectsPlayed = false;
    }
	
}
else
{
    //Console.WriteLine("Unable to get the GameManager instance.");
}

{
	if (BlackboardStatus.IsSuper())
{
    var playerData = Player.GetPlayerData();
    var gocVisual = GameObject.GetGOC<GOCPlayerVisual>(&playerData->GameObject);
    var visual = gocVisual->GetVisual<VisualSuperSonic>();
    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    if (visual == null)
        return;

    
	{
			if (visual->IsSuperSonic2 && Player.GetPlayerType() == Player.PlayerType.Sonic && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.PlayEffect("ss2burstwave", "ec_ss2_bo6160_burst01_wave01");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Sound.PlaySound("sn_chargecombo_air");
							Console.WriteLine("SS2 burst should be activated now.");
							
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");	
								
								soundPlayed = true;
							}
						if (XInput.GetTrigger(1) !> 0)
							{
								Player.Effect.StopEffect("ss2burstwave");
							}
						}
			else if (!visual->IsSuperSonic2 && Player.GetPlayerType() == Player.PlayerType.Sonic && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst && superAuraFix == false)
						{
							Player.Effect.StopEffect("chargeAura");
							Player.Effect.StopEffect("chargeAura");
							Player.Effect.PlayEffect("chargeAura", "ec_ss_aura01_burst01_gpu01");
							Player.Effect.StopEffect("chargeAura");
							Player.Effect.StopEffect("chargeAura");
							Player.Sound.PlaySound("sn_chargecombo_air");
							Console.WriteLine("SS2 flurries should be activated now.");
							
						if (!soundPlayed)
							{	
								soundPlayed = true;
							}
						if (XInput.GetTrigger(1) !> 0)
							{
								Player.Effect.StopEffect("ss2burstwave");
							}
						}
						else
						{
							if (soundPlayed && hyperStandingBurstCheck == false && !XInput.IsAnalogNeutral(0))
							{
									Player.Effect.PlayEffect("ss2burst", "ec_ss2_bo6160_burst02_lightning01");
									Player.Sound.PlaySound("sn_ringmax");
									Player.Sound.PlaySound("sn_lightdash");
									Player.Effect.PlayEffect("waveshake", "ec_ft_damage_down01_sa01_shake01");
									Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 50.0f);
									Console.WriteLine("SS2 lightning should be activated now.");
							}					
									soundPlayed = false;
						}	
			
						
			if (visual->IsSuperSonic2 && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
							Player.Sound.PlaySound("sn_chargecombo_air");
							Console.WriteLine("SS2 burst should be activated now.");
							
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");	
								
								soundPlayed = true;
							}
						if (XInput.GetTrigger(1) !> 0)
							{
								Player.Effect.StopEffect("ss2burstwave");
							}
						}
			else if (!visual->IsSuperSonic2 && Player.GetPlayerType() == Player.PlayerType.Sonic && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst && superAuraFix == false)
						{
							Player.Sound.PlaySound("sn_chargecombo_air");
							Console.WriteLine("SS2 flurries should be activated now.");
							
						if (!soundPlayed)
							{	
								soundPlayed = true;
							}
						if (XInput.GetTrigger(1) !> 0)
							{
								Player.Effect.StopEffect("ss2burstwave");
							}
						}
						else
						{
							if (soundPlayed && hyperStandingBurstCheck == false && !XInput.IsAnalogNeutral(0))
							{
									Player.Effect.PlayEffect("ss2burst", "ec_ss2_bo6160_burst02_lightning01");
									Player.Sound.PlaySound("sn_ringmax");
									Player.Sound.PlaySound("sn_lightdash");
									Player.Effect.PlayEffect("waveshake", "ec_ft_damage_down01_sa01_shake01");
									Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 50.0f);
									Console.WriteLine("SS2 lightning should be activated now.");
									
							}					
									soundPlayed = false;
						}
		
	}		
	
	}	
}
static void BaseHyperVibrate ()
	{
		if (XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && hyperBurstWaveCheck && isBase != true
			|| XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && hyperBurstWaveCheck && isBase == true && BlackboardStatus.IsSuper()
				|| XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
				|| XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateCaught
				|| XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack
					|| XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrind)
			{
				if (vibrationOn)
					{
						XInput.SetVibration(0.5f);
					}
			}
		else
				{
					XInput.SetVibration(0.0f);
				}
		if (vibrationOn && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge && Player.Status.IsGrounded() && isBase != true)
						{
							XInput.SetVibration(0.2f);
						}
		else if (vibrationOn && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost && Player.Status.IsGrounded() && isBase != true)
			{
				XInput.SetVibration(0.4f);
			}
		
	}
static void AuraLogic ()
{
	if (auraActive)	
				{
					var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
					const float DefaultDeclineSpeed = -500.0f;
					const float SuperDeclineSpeed = 7.0f;
					const float SuperDeclineSpeedAccele = 20.0f;

					// Set default values
					RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeed, DefaultDeclineSpeed);
					Player.Sound.PlaySound("sn_supersonic");
					RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeedAccele, DefaultDeclineSpeed);
					
					if (!BlackboardStatus.IsSuper() && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							Player.Effect.PlayEffect("SuperSmoke", "ec_hs_aura02_default_gpu02");
						}
				
					Player.Effect.StopEffect("SuperSmoke");
					
					if (auraActive && BlackboardStatus.IsSuper())
					{
						// Use SuperDeclineSpeed when both auraActive and BlackboardStatus.IsSuper() are true
						RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeed, SuperDeclineSpeed);
						RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeedAccele, SuperDeclineSpeedAccele);
						Player.Effect.StopEffect("SuperSmoke");
					}
				}
				
}
static void NewAuraLogic ()
	{
		if (auraActive)
			{
				Player.Effect.PlayEffect("Aura", "ec_so_skill_accelerator_aura01_gpu01");
				
				Player.Effect.StopEffect("Aura");
			}
	}
static void HyperAnimations ()
	{
		var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
			var pGameModeStage = GameMode.Get("GameModeStage");
			var pBlackboardBattle = BlackboardBattle.Get();
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGuardedFlipBack)
				{
					Player.Animation.SetAnimation("JUMP_BALL");
				}
		if (XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot)
				{
					if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateFall ||
					Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateJump ||
					Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump ||
					Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateGrindJump ||
					Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateGrindDoubleJump)
				{
					if (idle01fix == false && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							Player.Animation.SetAnimation("BUMP_JUMP_START");
						}
				}
				else if (idle01fix == false && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot && Player.GetPlayerType() == Player.PlayerType.Sonic)
					{
						Player.Animation.SetAnimation("BUMP_JUMP_R");
					}
				}
		
			if (XInput.GetTrigger(1) > 0)
				{
					idle01fix = true;
				}
			else
				{
					idle01fix = false;
				}
			if (flightCheck && !BlackboardStatus.IsSuper())
				{
					if (!BlackboardStatus.IsSuper())
						
						{
							if (XInput.GetTrigger(1) > 0 && !XInput.IsAnalogNeutral(0) && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateParry && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateFly
								|| XInput.GetTrigger(1) > 0 && !XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
								
								{
									Player.Animation.SetAnimation("FLY");
									//Console.WriteLine("FLY");
								}
							else if (!XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
								{
									//Console.WriteLine("WALK");
									Player.Animation.SetAnimation("WALK");
								}
							
								if (!BlackboardStatus.IsSuper() && XInput.GetTrigger(0) > 0 && XInput.GetTrigger(1) > 0 && !XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingFall && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind)
								{
									//Console.WriteLine("DRIFT");
									Player.Animation.SetAnimation("DRIFT");
								}
								if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFlyTurn)
								{
									//Console.WriteLine("TURN");
									Player.Animation.SetAnimation("TURN");
								}
								if (!IS_WORLD_FLAG(IsAutoRun) && XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingRoot && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingFall && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFall && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateAirBoost && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateCaught && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot
									|| !IS_WORLD_FLAG(IsAutoRun) && XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0) && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingRoot && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingFall && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFall && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateAirBoost && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateCaught && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
								
								{
									Player.Animation.SetAnimation("IDLE01");
									//Console.WriteLine("Idle01 should play here.");
								}
						}
						
						
					if (XInput.GetTrigger(1) > 0 && XInput.IsAnalogNeutral(0)
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDivingFall
							&& Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDropDash
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateJumpBoardLaunch
							&& Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
							&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateCaught)
						{
							if (!Player.Status.IsGrounded() && pGameModeStage != null && flightBool
								|| !Player.Status.IsGrounded() && flightBool)
								{
									Player.State.Redirect(Sonic.StateID.StateFly, Sonic.StateID.StateFly);
									Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFly);
								}							
						}
				}
			
	}
static void SuperGPUParticles ()
	{	
		var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
		var pGameModeStage = GameMode.Get("GameModeStage");
		var pBlackboardBattle = BlackboardBattle.Get();
		
		if (!BlackboardStatus.IsSuper() && burstTrailOn && Player.GetPlayerType() == Player.PlayerType.Sonic && superSonicGPU)
				{
					Player.Effect.PlayEffect("aura3", "ec_hs_aura02_default_gpu01");
					Player.Effect.StopEffect("aura3");
							
				if (XInput.IsButtonDown(XInput.Buttons.DPAD_DOWN))
					{
						if (XInput.IsButtonDown(XInput.Buttons.Y))
						{
							Player.Effect.StopEffect("aura3");
						}
					}
						if (XInput.IsButtonDown(XInput.Buttons.DPAD_UP))
						{
							if (XInput.IsButtonDown(XInput.Buttons.Y))
							{
								Player.Effect.PlayEffect("aura3", "ec_hs_aura02_default_gpu01");
							}
						}
				}
		
		if (superSonicGPU)
			{
				if (Player.GetPlayerType() == Player.PlayerType.Sonic)
					{
						//Player.Effect.PlayEffect("GPUBody", "ef_ss_aura02_default");
						//Player.Effect.PlayEffect("GPUBody", "ef_ss_aura02_foot_default");
						//Player.Effect.PlayEffect("GPUBody", "ef_ss_aura02_hand_default");
						//Player.Effect.PlayEffect("GPUBody", "ef_ss_aura02_head_default");
						
						Player.Effect.StopEffect("GPUBody");
						Player.Effect.StopEffect("GPUBody");
						Player.Effect.StopEffect("GPUBody");
						Player.Effect.StopEffect("GPUBody");
					}
					else if (Player.GetPlayerType() == Player.PlayerType.Amy || Player.GetPlayerType() == Player.PlayerType.Knuckles || Player.GetPlayerType() == Player.PlayerType.Tails)
					{
						Player.Effect.StopEffect("GPUBody");
						Player.Effect.StopEffect("GPUBody");
						Player.Effect.StopEffect("GPUBody");
						Player.Effect.StopEffect("GPUBody");
					}
			}
		
			if (!BlackboardStatus.IsSuper() && IS_STATE_FLAG(IsBoost) && particleBoostLimiter == false && burstTrailOn)
            {
				particleBoostLimiter = true;
				
                //Player.Effect.PlayEffect("WaveBoostBody", "ec_ss_aura04_boost_gpu01");
				//Player.Effect.PlayEffect("WaveBoostBody", "ec_ss_aura04_boost_gpu02");
				

            }
		else
			if (particleBoostLimiter)
				{
					Player.Effect.StopEffect("WaveBoostBody");
					Player.Effect.StopEffect("WaveBoostBody");
					
					
					particleBoostLimiter = false;
				}
		System.Timers.Timer timer = new System.Timers.Timer(1000); // Set interval to 1000ms (1 second)
        timer.Enabled = true;
		
        timer.Elapsed += (source, e) =>
        {
            if (!BlackboardStatus.IsSuper() && IS_STATE_FLAG(IsBoost) && Player.GetPlayerType() == Player.PlayerType.Sonic)
            {
                Player.Effect.PlayEffect("WaveBoost", "ef_ss_dash_smoke02");
				Task.Delay(-1).Wait(); // Keep the program running
            }
        };
	}
static void BurstWave ()
{
		Console.WriteLine("Unpaused");
		if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot && hyperStandingBurst
							|| Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
							
								{
									chargeSFX = true;
								}
						
						if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot && hyperStandingBurst
							||Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack && Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
									Player.Effect.StopEffect("ss2burstwave");
									Player.Effect.StopEffect("ss2burstwave");
									Player.Effect.StopEffect("ss2burstwave");
									if (BlackboardStatus.IsSuper() && isHyper || !BlackboardStatus.IsSuper() && isHyper)
										{
											Player.Effect.PlayEffect("ss2burstwave", "ec_ss_bo6160_burst01_wave01");
										}
									if (BlackboardStatus.IsSuper() && isHyper == false || !BlackboardStatus.IsSuper() && isHyper == false)
										{
											Console.WriteLine("Super Sonic colors");
											Player.Effect.PlayEffect("ss2burstwave", "ec_oss_aura01_burst01_gpu01");
										}
									Player.Effect.StopEffect("ss2burstwave");
									Player.Effect.StopEffect("ss2burstwave");
									Player.Effect.StopEffect("ss2burstwave");
											
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");
								soundPlayed = true;
							}
						}
						else
						{
							if (soundPlayed && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun
								|| soundPlayed && hyperStandingBurstCheck == false && !XInput.IsAnalogNeutral(0))
								{
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_fv01_distortion01");
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_fv01_distortion01");
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_fv01_distortion01");
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_fv01_distortion01");
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_fv01_distortion01");
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_fv01");
									Player.Effect.PlayEffect("ss2burst", "ec_so_boost_impact_sv01");
									Player.Effect.PlayEffect("ss2burst", "ec_ss2_bo6160_burst02_lightning01");
									Player.Sound.PlaySound("sn_ringmax");
									Player.Sound.PlaySound("sn_lightdash");
									Player.Effect.PlayEffect("waveshake", "ec_ft_damage_down01_sa01_shake01");
									
									
								}
												
							soundPlayed = false;
							
						}
	
}
static void MiscLogic ()
{
			bool boostSFX = false;
			
			bool triggerPressed = XInput.GetTrigger(1) > 0; 
			bool lastTriggerState = false; // Store the previous state of the trigger
			
			var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
			var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
	{
							if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateStompingLand)
								{
									RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 22);
									RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 70);
								}
								
								else if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand && hyperStomp)
									{
										if (vibrationOn)
										{
											XInput.SetVibration(0.5f);
										}
										RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 800);
										RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 2500);
									}
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand && hyperStompExtendDamage && hyperStompCameraShake && hyperStomp)
								{
									Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 100.0f);
									Player.Effect.PlayEffect("boosting", "ec_ft_damage_down01_sa01_shake01");
									
									
								}
							if (disableDamage) //fixes Asura softlock
								{
									if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack &&
										Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCaught ||
										Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateRun &&
										Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCaught ||
										Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJump &&
										Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCaught ||
										Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot &&
										Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCaught)
										{
											Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateCaught);
										}
									else if (Player.State.GetPreviousStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack &&
											 Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCaught)
										{
											Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFall);
										}
								}
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand && hyperStomp)
								{
									Sonic.StateID NotifySuperStompLand(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
									{
										if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateStompingLand)
										{
											Player.State.AddStateParameter<StateStompingLandParameter>(new StateStompingLandParameter(3));
										}
										return in_stateId;
									}

									Player.State.AddStateNotifyAction<Sonic.StateID>(NotifySuperStompLand);

									var kinematics = Player.Kinematics.Get();

									if (kinematics == null)
										return;

									if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateStompingLand)
									{
										if (SonicParametersInfo.pData == null)
											return;
										
										RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParametersInfo, modePackage.stomping.boundStompingCollisionScale, _radius);
									}
								}
							//The following is responsible for Sonic flying up if you boost in the air and press and hold A.  This is a side effect of the intended behavior, but it may be patched out or reworked into something useful.  Leaving this as-is for now, as the steps required for this to work are obscure.
							if	(hyperFlash  && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly && isHyper)
								{
									Player.State.Redirect(Sonic.StateID.StateDoubleJump, Sonic.StateID.StateAirBoost);
									
								}
							if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDoubleJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly)
								{
									RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 22);
									RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 70);
								}
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly && hyperFlash)
								{
									RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 7000);
									RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 8000);
								}
							if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateFall || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateStompingDown || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateGrind || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJump || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateCaught)
								{
									Player.State.Redirect(Sonic.StateID.StateFly, Sonic.StateID.StateFall);
									Console.WriteLine("Falling");
								}
							else if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSonicBoomKick || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSonicBoomKick)
								{
									Player.State.Redirect(Sonic.StateID.StateFly, Sonic.StateID.StateFly);
								}
							if (BlackboardStatus.IsSuper())
								{
									Player.State.Redirect(Sonic.StateID.StateFly, Sonic.StateID.StateFly);
								}
							if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSonicBoomKick && triggerPressed && !lastTriggerState) 
								{
									if (!IS_STATE_FLAG(IsBoost)) // Ensures boost only triggers once per activation
									{
										SET_STATE_FLAG(IsBoost, true);
										boostSFX = true; 
										Console.WriteLine("boost ready");
										Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFly);
										
									}
								}
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && Player.Status.IsGrounded())
								{
									Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRun);
									Console.WriteLine("Ground detected!");
								}
							//if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsButtonDown(XInput.Buttons.A))
								{
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.addForceTime, 500);
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.longPressTime, 500);
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.force, 150);
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.gravitySize, 0);
									
									//Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStandRoot);
									//Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateJump);
								}
							//else
								{
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.addForceTime, 15);
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.longPressTime, 20);
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.force, 24);
									//RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jump.gravitySize, 30);
								}
								
							if (!BlackboardStatus.IsSuper() && XInput.GetTrigger(1) > 0 && XInput.IsButtonDown(XInput.Buttons.B) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
								{
									Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFly);
								}
								if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsButtonDown(XInput.Buttons.A) && !BlackboardStatus.IsSuper())
							{	
								Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFall);
							}
						if (XInput.GetTrigger(0) !> 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsButtonDown(XInput.Buttons.B) && !BlackboardStatus.IsSuper())
							{	
								Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStompingDown);
							}
							
						if (boostSFX)
						{
							Player.Sound.PlaySound("sn_boost_run");
							Console.WriteLine("boost");
							boostSFX = false; // Prevents looping
						}

						lastTriggerState = triggerPressed; // Updates the previous state of the trigger


						lastTriggerState = triggerPressed; // Update previous state
	}	
}
static void HyperFlashLogic ()
	{
		var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
		var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
		
		
		{
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && hyperFlash)
									{
										if (vibrationOn)
											{
												XInput.SetVibration(0.5f);
											}
										_flashLockOn = true;
										
										Player.Sound.PlaySound("sn_lightdash");
										RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 500.0f);
										RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 500.0f);
										RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 500.0f);
										RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 500.0f);
										
										if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly)
											{
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, -10.0f);
											}
										
										RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, 120.0f);
										
								
										Player.State.Redirect(Sonic.StateID.StateFall, Sonic.StateID.StateDoubleJump);
										
										RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 900.0f);
										RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 900.0f);
										RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 900.0f);
										RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 900.0f);
										
										if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly)
											{
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, -1.0f);
											}
										RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, 15.0f);
										
										
										if (hyperFlashCameraShake)
											{
												if (XInput.IsButtonDown(XInput.Buttons.A) && XInput.GetTrigger(1) != 0)
													{
														Player.Effect.PlayEffect("boosting", "ec_ft_damage_down01_sa01_shake01");
													}
											}
										
										if (isHyper && hyperFlashDamage)
											{
												Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 100.0f);
											}
										Player.Collision.SetEntityCollision(false);
									}
										else if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDoubleJump && hyperFlash && _flashLockOn)
											{
												_flashLockOn = false;
												
												Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 1.0f);
													
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 15.0f);
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 15.0f);
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 20.0f);
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 60.0f);
													
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 0.0f);
												RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
														
												RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 15.0f);
												RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 15.0f);
												RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 20.0f);
												RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 60.0f);
												
												RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, 0.0f);
												RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
												
												if (hyperFlashWhiteOut)	
													{
														Lua.Call("FadeIn", (0), "white");
														Console.WriteLine("Fade in 1");
													}
												if (flashFade)	
													{
														Lua.Call("FadeIn", (1), "white");
														Console.WriteLine("Fade in 1");
													}
													
												
												Player.State.Redirect(Sonic.StateID.StateFall, Sonic.StateID.StateFall);
												
												
												if (pGameModeCyberStage != null && hyperFlashExplosion)
												{
													Player.Effect.PlayEffect("meteorDash", "ec_hs2_bo6160_burst01_wave01");
													Player.Effect.PlayEffect("meteorDash", "ec_hs2_bo6160_burst01_wave01");
													Player.Effect.PlayEffect("meteorDash", "ef_ss2_aura01_out01");
												}
												Player.Collision.SetEntityCollision(true);
												_flashLockOn = false;
											}
								
								if (XInput.IsButtonDown(XInput.Buttons.Y) && XInput.IsButtonDown(XInput.Buttons.LEFT_SHOULDER) && XInput.IsButtonDown(XInput.Buttons.RIGHT_SHOULDER) && hyperFlash)
									{
										
										if (hyperFlashWhiteOut)
											{
												Lua.Call("FadeIn", (0), "white");
												Console.WriteLine("Fade in 2");
											}
										if (flashFade)
											{
												Lua.Call("FadeIn", (1), "white");
												Console.WriteLine("Fade in 2");
											}
										
										flashFix = true;
									}
								
								else if (!XInput.IsButtonDown(XInput.Buttons.Y) && flashFix)
									{
										Player.Sound.PlaySound("sn_chaosemerald_use");
										
										Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 100.0f);
												
										RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 50);
										RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 100);
										RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);
										RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 40);
										
										Player.Effect.PlayEffect("meteorDash", "ec_hs2_bo6160_burst01_wave01");
										Player.Effect.PlayEffect("meteorDash", "ec_hs2_bo6160_burst01_wave01");
										Player.Effect.PlayEffect("meteorDash", "ef_ss2_aura01_out01");
										
										if (hyperFlashWhiteOut)
											{
												Lua.Call("FadeOut", (0), "white");
												Console.WriteLine("Fade out 1");
											}
										if (flashFade)
											{
												Lua.Call("FadeOut", (1), "white");
												Console.WriteLine("Fade out 1");
											}
										flashFix = false;
										flashFix2 = true;
									}
								if (flashFix2)
									{
										if (hyperFlashWhiteOut)
											{
												Lua.Call("FadeIn", (0), "white");
												Console.WriteLine("Fade in 3");
											}
										if (flashFade)
											{
												Lua.Call("FadeIn", (1), "white");
												Console.WriteLine("Fade in 3");
											}
									}
								if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && hyperFlashCheckNew == false)
									{
										hyperFlashWhitePlayed = true;
									}
								else if (hyperFlashWhitePlayed)
									{
										if (hyperFlashWhiteOut)
											{
												Lua.Call("FadeOut", (0), "white");
												hyperFlashWhitePlayed = false;
												Console.WriteLine("Fade out 2");
											}
										if (flashFade)
											{
												Lua.Call("FadeOut", (1), "white");
												hyperFlashWhitePlayed = false;
												Console.WriteLine("Fade out 2");
											}
									}
								if (hyperFlashWhitePlayed == false)
									{
										if (hyperFlashWhiteOut)
											{
												Lua.Call("FadeIn", (0), "white");
												hyperFlashCheckNew = false;
												Console.WriteLine("Fade in 4");
											}
										if (flashFade)
											{
												Lua.Call("FadeIn", (1), "white");
												hyperFlashCheckNew = false;
												Console.WriteLine("Fade in 4");
											}
									}
							
		}
	}
static void MeteorDamageFix ()
	{	
		Lua.Call("LoadLevel", "supersonic2");
		
		var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
		
		var playerData = Player.GetPlayerData();
		var gocVisual = GameObject.GetGOC<GOCPlayerVisual>(&playerData->GameObject);
		var visual = gocVisual->GetVisual<VisualSuperSonic>();
		
		var pGameModeStage = GameMode.Get("GameModeStage");
		
		
		float driftDashActivationTimer = 0.0f;
		DateTime startTime = DateTime.Now; // Initialize startTime
		DateTime xButtonReleasedTime = DateTime.MinValue;
		
		var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
		
		
		
			{
				if (XInput.IsButtonDown(XInput.Buttons.X) && XInput.IsButtonDown(XInput.Buttons.LEFT_SHOULDER) && XInput.IsButtonDown(XInput.Buttons.RIGHT_SHOULDER) && chaosMeteor)
					{
						meteorDamageConflictFix = true;
						meteorDamage = true;							
						Console.WriteLine("Chaos Meteor: Damage fix set!");
					}
				else if (meteorDamage && effectsPlayed && !XInput.IsButtonDown(XInput.Buttons.X))
					{	
						if (pGameModeStage != null)
							{
								Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateParry);
							}
						
						Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 30.0f);
						meteorDamageConflictFix = false;
						meteorDamage = false;
						
					}
				if (parryCheck)
					{
						
					}
				if (XInput.IsButtonDown(XInput.Buttons.LEFT_SHOULDER) && XInput.IsButtonDown(XInput.Buttons.RIGHT_SHOULDER) && pGameModeCyberStage != null)
					{
						Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateParryStand);
						parryCheck = true;
					}
				else if (parryCheck)
					{
						Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStandRoot);
						Player.Animation.SetAnimation("PARRY");
						parryCheck = false;
					}
				else if (XInput.IsButtonDown(XInput.Buttons.LEFT_SHOULDER) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot && pGameModeCyberStage != null)
					{
						Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateLeftStep);
					}
				else if (XInput.IsButtonDown(XInput.Buttons.RIGHT_SHOULDER) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot && pGameModeCyberStage != null)
					{
						Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRightStep);
					}
				else if (XInput.IsButtonDown(XInput.Buttons.LEFT_SHOULDER) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun && pGameModeCyberStage != null)
					{
						Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateLeftStepRun);
					}
				else if (XInput.IsButtonDown(XInput.Buttons.RIGHT_SHOULDER) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateRun && pGameModeCyberStage != null)
					{
						Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRightStepRun);
					}
				if (!effectsPlayed && chaosMeteor)
			{
				meteorDashActivated = false;

				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 500);
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 1000);
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 40);

				Player.Sound.PlaySound("sn_ringmax");
				Player.Sound.PlaySound("sn_drift");
				Player.Sound.PlaySound("sn_chaosemerald_use");

				// Set the flag to true to indicate that effects have been played
				effectsPlayed = true;
			}
			if (XInput.IsButtonDown(XInput.Buttons.LEFT_SHOULDER) && XInput.IsButtonDown(XInput.Buttons.RIGHT_SHOULDER) && XInput.IsButtonDown(XInput.Buttons.X) ||
				XInput.GetTrigger(0) > 0 && XInput.GetTrigger(1) > 0 && XInput.IsButtonDown(XInput.Buttons.X))
			{

				// Check if meteorDash should be activated
				if (hyperFlash && !meteorDashActivated)
				{
					_flashLockOn4 = true;
					meteorDashActivated = true; // Set the flag to indicate meteorDash activation
					
					{
						// Play effects for CyberStage
						var effectsToPlay = new string[] { "ef_ss2_bo6160_charge01", "ef_ss2_bo6160_omen01", "ef_ss2_bo6160_omen01",  };
						foreach (var effect in effectsToPlay)
						{
							Player.Effect.PlayEffect("meteorDash", effect);
							Player.Effect.PlayEffect("meteorDash", effect);
							Player.Effect.PlayEffect("meteorDash", effect);
							Player.Effect.PlayEffect("meteorDash", effect);
						}
						Player.Sound.PlaySound("sn_ringmax");
						Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 3.0f);
						driftDashActivationTimer = 0.0f; // Reset the timer when entering this block
					}
					if (hyperFlashCameraShake)
					{
						Player.Effect.PlayEffect("boosting", "ec_ft_damage_down01_sa01_shake01");
					}

					Player.Collision.SetEntityCollision(false);

					// Store the current time when X button is pressed
					xButtonReleasedTime = DateTime.Now;
				}
					
			}
			else if (!XInput.IsButtonDown(XInput.Buttons.X))
			{
				// Reset effects and collisions when X button is not pressed
				if (meteorDashActivated)
				{	
					
					{
						Player.Effect.StopEffect("meteorDash");
						Player.Effect.StopEffect("meteorDash");
						Player.Effect.StopEffect("meteorDash");
						Player.Effect.PlayEffect("blow", "ef_ss2_bo6160_charge02");
						Player.Effect.PlayEffect("blow", "ef_ss2_bo6160_burst01");
						Player.Effect.PlayEffect("blow", "ef_ss2_aura01_out01");
						
						Player.Effect.PlayEffect("blow", "ef_ss2_bo6160_burst01");
						Player.Effect.PlayEffect("blow", "ef_ss2_bo6160_burst01");
						Player.Effect.PlayEffect("blow", "ef_ss2_bo6160_burst02");
						
						meteorDashActivated = false; // Reset the flag when meteorDash is not activated
						Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 15.0f); // Increase damage to 15
						RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 500);
						RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 1000);
						RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);
						RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 40);
						
							Player.Sound.PlaySound("sn_ringmax");
							Player.Sound.PlaySound("sn_drift");
							Player.Sound.PlaySound("sn_chaosemerald_use");
					}
					
				}
				if (!XInput.IsButtonDown(XInput.Buttons.X))
					{	
						Player.Effect.StopEffect("meteorDash");
						//Console.WriteLine("X released, 1.0f, meteorDash");
					}
				else if (!XInput.IsButtonDown(XInput.Buttons.X))
					{	
						Player.Effect.StopEffect("meteorDash");
					}
				}
	}			
	}
static void DivingLogic ()
{
			var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
			var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
	{
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall && XInput.IsButtonDown(XInput.Buttons.Y)
						|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && XInput.IsButtonDown(XInput.Buttons.Y)
							|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && XInput.IsButtonDown(XInput.Buttons.Y))
									{
										Player.Sound.PlaySound("sn_lightdash");
										
										Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDiving);
										
										Player.Collision.SetEntityCollision(false);
									}
				else if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving && _flashLockOn2 && XInput.IsButtonDown(XInput.Buttons.B))
					{
						Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 1.0f);
						
						Player.Collision.SetEntityCollision(true);
						_flashLockOn = false;
										
					}
					if (XInput.IsButtonDown(XInput.Buttons.Y))
					{
						if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall)
						{
							freeDiveCheck = true;
						}
					}
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingRoot)
						{
							freeDiveCheck = false;
							Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDivingFall);
						}
				if (freeDiveCheck == true)
					{
						RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.normal.maxHorzSpeed, 120.0f);
						RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.normal.acceleHorzForce, 120.0f);
												
						RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.maxHorzSpeed, 90.0f);
						RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.acceleHorzForce, 90.0f);
												
					if (XInput.GetTrigger(0) > 0)
						{
							RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.maxVertSpeed, 120.0f);
							RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.acceleVertForce, 80.0f);														
						}
					else
						{
							RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.maxVertSpeed, 40.0f);
							RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.acceleVertForce, 10.0f);
													
						}	
					}
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving && XInput.IsButtonDown(XInput.Buttons.B))
						{	
							Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStompingDown);
						}
				}	
				if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving)
					{
						Player.Animation.SetAnimation("DIVE");
					}
}
static void FreeDiveStomp ()
{
			var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
			var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
	{
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.normal.maxHorzSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.normal.acceleHorzForce, 15.0f);
												
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.maxHorzSpeed, 10.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.diving.fast.acceleHorzForce, 10.0f);
									
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving && XInput.IsButtonDown(XInput.Buttons.B))
						{
							//_flashLockOn2 = true;
											
							Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStompingDown);
											
					if (pGameModeCyberStage != null && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingLand)
						{
							//reserved
						}
					if (hyperFlashCameraShake)
						{
							Player.Effect.PlayEffect("boosting", "ec_ft_damage_down01_sa01_shake01");
						}
					if (pGameModeCyberStage != null && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateStompingLand)
						{
							//reserved
						}
					if (pGameModeCyberStage != null && flashFade && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateStompingLand)
						{
							//reserved
						}
						
					Player.Collision.SetEntityCollision(false);
					_flashLockOn2 = false;
					Player.Collision.SetEntityCollision(false);
					
						}
				}
}
static void SpinDashEffects ()
	{
		if (Player.GetPlayerType() == Player.PlayerType.Sonic && Player.Status.IsGrounded() && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost && hyperSpinDash)
							{
								Player.Effect.PlayEffect("spinwave", "ec_pl_hit_accelerator01_gpu01");
								Player.Effect.PlayEffect("spinwave", "ec_pl_hit_accelerator01_glow01");
								Player.Effect.PlayEffect("spinwave", "ec_pl_hit_accelerator01_shock01");
								Player.Effect.PlayEffect("spinwave", "ec_pl_hit_accelerator01_shock01_bl");
								Player.Effect.PlayEffect("spinwave", "ec_pl_hit_accelerator01_plight01");
								Player.Effect.StopEffect("spinwave");
								Player.Effect.StopEffect("spinwave");
								Player.Effect.StopEffect("spinwave");
								Player.Effect.StopEffect("spinwave");
								Player.Effect.StopEffect("spinwave");
								Player.Effect.StopEffect("spinwave");
								Player.Collision.SetCollisionSphere(Player.CollisionType.DamageHoming, 20.0f);
							}
	}
{
    if (!_isConfigInitialised)
    {
        var mods = HMM.FindModsByName("Super/Hyper Sonic Ultimate");

        // Duplicates present, aborting!
        if (mods.Count > 1)
        {
            // Skip config init on next loop, use default values.
            _isConfigInitialised = true;
            return;
        }

        var configPath = Path.Combine(mods[0].Path, "mod.ini");
        var configData = INI.Read(configPath);

        /* Parse value "IncludeDir3" from the section "Main" from "mod.ini",
		/* Parse value "IncludeDir2" from the section "Main" from "mod.ini",
           with the default value being zero as that is the initialised value of "_auraMode". */
        _auraMode = (configData["Main"]["IncludeDir3"]);
		_auraMode1 = (configData["Main"]["IncludeDir2"]);
		_openCyloopMode = (configData["Main"]["IncludeDir1"]);

        _isConfigInitialised = true;
    }
	switch (_openCyloopMode)
	{
	case "null":
	{
		[DllImport("user32.dll", CharSet = CharSet.Unicode)]
		static extern int MessageBox(IntPtr hWnd, string text, string caption, uint type);
			
		MessageBox(IntPtr.Zero, "To continue, please open the config settings in Hedgemodmanager and choose an open world form.  While there, feel free to play around with the other config options.  The game will now close.", "Super/Hyper Sonic Ultimate: config required!", 0);
		Environment.Exit(0);
		
		break;
	}
			case "open_hyper_cc":
		{
			isHyper = true;
			isBase = false;
			
			var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
			var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
			var pGameModeStage = GameMode.Get("GameModeStage");
			var pBlackboardBattle = BlackboardBattle.Get();
			var sonicStateID = Player.State.GetCurrentStateID<Sonic.StateID>();
			
			Player.State.Redirect(Sonic.StateID.StateGuardedFlipBack, Sonic.StateID.StateAirBoost);
			
			if (!BlackboardStatus.IsSuper() && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.PlayEffect("ss2burstwave", "ec_hs2_bo6160_burst01_wave01");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Sound.PlaySound("sn_chargecombo_air");
							Console.WriteLine("SS2 burst should be activated now.");
							
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");	
								
								soundPlayed = true;
							}
						if (XInput.GetTrigger(1) !> 0)
							{
								Player.Effect.StopEffect("ss2burstwave");
							}
						}
			if (IS_WORLD_FLAG(IsCyberSpace) && XInput.GetTrigger(1) > 0
				|| GameMode.GetName() == "GameModeTutorial" && XInput.GetTrigger(1) > 0)
				{
					
				}
			else
				{
					AuraLogic();
					//NewAuraLogic();
					HyperAnimations();
					SuperGPUParticles();
					SpinDashEffects();
				}
	
			Lua.Call("LoadLevel", "supersonic");
			
			{
				if (Player.GetPlayerType() != Player.PlayerType.Sonic)
						return;
			}
			
			if (!BlackboardStatus.IsSuper())
				{
					disableMeteor = false;
				}
				
			if (XInput.IsButtonDown(XInput.Buttons.A))
				{
					jumpFlightCheck = true;
					////Console.WriteLine("Jump flight check enabled...");
				}
				
			if (jumpFlightCheck)
				{
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump)
						{
							jumpFlightCheckHelper = true;
							////Console.WriteLine("Checking for right trigger press...");
						}
				}
				
			if (jumpFlightCheckHelper && XInput.GetTrigger(1) > 0)
					{
						////Console.WriteLine("Right trigger pressed!  Flight state activated!");
						flightCheck = true;
					}
			else if (XInput.IsButtonDown(XInput.Buttons.A) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && XInput.GetTrigger(1) > 0)
				{
					Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
				}
				
			
			
				
			if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly
				|| XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind)
					{
						hyperStandingBurstCheck = true;
						Console.WriteLine("Burst wave check has been activated.");
					}		
						
			if (!XInput.IsAnalogNeutral(0) || XInput.GetTrigger(1) > 0)
					{
						hyperStandingBurstCheck = false;
						Console.WriteLine("Burst wave exploded.");
					}
			
			if (XInput.GetTrigger(0) > 0 && flightCheck)
					{
						
						if (XInput.GetTrigger(1) > 0)
							{
								
								Player.State.Redirect(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateDriftAir);
								
								////Console.WriteLine("Sonic should be drifting now.");
								
								
							}
						if (XInput.IsAnalogNeutral(0))
							{
								Player.State.Redirect(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateSonicBoomKick);
							}
					}
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB)
				|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB)
				|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB))
					{
						if (pGameModeStage != null && flightBool)
							{
								Player.State.Redirect(Sonic.StateID.StateFly, Sonic.StateID.StateFly);
								Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFly);
							}
						////Console.WriteLine("Sonic should be flying now.");
						flightCheck = true;
					}
			
			if (flightCheck)
				{
					if (flightCheck && XInput.IsAnalogNeutral(0) && XInput.GetTrigger(1) > 0
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindRoot
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindJump
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFall)
							{
								////Console.WriteLine("Checking for RT press to activate flight");																
							
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingFall
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpring
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpecial
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpring
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingRoot
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving)
								{
									////Console.WriteLine("Diving should activate here.");
									Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDivingFall);
								}
							}
				}
				
			if (damageToggle == true && XInput.IsButtonDown(XInput.Buttons.BACK) && XInput.IsButtonDown(XInput.Buttons.X) && XInput.IsButtonDown(XInput.Buttons.Y))
				{
					damageToggle = false;
				}
			if (damageToggle == false && XInput.IsButtonDown(XInput.Buttons.BACK) && XInput.IsButtonDown(XInput.Buttons.X) && XInput.IsButtonDown(XInput.Buttons.Y))
				{
					damageToggle = true;
				}
			if (transImpactDamage && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
					
				{
					Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 1.0f);
				}
			if (transImpactDamage && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
					
				{
					Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 0.0f);
				}	
			if (!BlackboardStatus.IsSuper()  && isHyper || BlackboardStatus.IsSuper() && isHyper)
				{
					if (GameManager.GetGameObject("MainMenu") != null || GameManager.GetGameObject("MapMenu") != null)
						{
							break;
						}
					else
						{
							Console.WriteLine("Unpaused");
							BurstWave();
							BaseHyperVibrate();
						}
				}
			
			if (chargeSFX)
				{
					Player.Sound.PlaySound("sn_chargecombo_air");
					chargeSFX = false;
				}
			if (pBlackboardBattle == null)
				{
					return;
				}
				
			if (dummy)
				{
					pBlackboardBattle->PhantomRushAmount = 120.0f;
				}
										
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.Default)
				{
					Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning01");
					Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning02");
										
					Player.Effect.PlayEffect("boosting", "ef_pl_hit01_atk01");
				}			
			
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
					{
						if (trailOn && !BlackboardStatus.IsSuper())
							{
								Player.Effect.PlayEffect("line", "ec_so_stomp_locus01");
							}
						else
							{
								Player.Effect.StopEffect("line");
							}
					}
								
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							MiscLogic();
							if (!BlackboardStatus.IsSuper() || BlackboardStatus.IsSuper() && isHyper)
								{	
									if (isPaused == true)
											{
												HyperFlashLogic();
												MeteorDamageFix();
												BaseHyperVibrate();
												Console.WriteLine("Unpaused, move should work.");
											}
								}
						}
			
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
						||	hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
				if (isPaused == true)
				{
					DivingLogic();
				}
			if (freeDiveCheck == false)
				{
					FreeDiveStomp();
				}
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving && XInput.IsButtonDown(XInput.Buttons.A))
				{
					_flashLockOn3 = true;
										
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 0.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -150.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 900.0f);
							
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, -1.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, 15.0f);
				}
			else if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost && _flashLockOn3 && XInput.IsButtonDown(XInput.Buttons.A))
				{
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 60.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
																				
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 60.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
					_flashLockOn3 = false;
				}		
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_luminance, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineWidth, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineDisplayWidth, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineBlackEdgeWidth, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color1.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color1.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].m_color.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].m_color.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].m_color.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].m_color.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].m_color.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].m_color.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[2].m_color.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[2].m_color.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[2].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.startAngle, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.endSpeed, 2.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeed, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeedMax, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeed, 11.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeedMax, 11.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeedMax, 8.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeedMax, 60.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.accel, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.brake, 12.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerAngle, 70.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.steerAccel, 500.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerSpeed, 500.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.neutralSteerAccel, 1080.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxNeutralSteerSpeed, 15.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxRotateSpeed, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.recoverTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxChargeTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minDashSpeed, 60.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxDashSpeed, 80.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minDashJumpSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxDashJumpSpeed, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.jumpSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.checkFallTime, 2.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.minSpeed, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.accel, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageBrake, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageBrakeTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageMotionTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageInvicibleTime, 1.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damper, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airDamperV, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airDamperH, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.gravity, 50.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airJumpSpeed, 25.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.groundJumpSpeed, 19.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airAccel, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxAirAddSpeed, 100.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.downForceRate, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed1, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed2, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed3, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSteeringSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.endSteeringSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.staticStartSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.finishSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.finishTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.bigLandTime, 1.5f);
			
			break;
		}
		
		case "open_hyper":
		{
			isHyper = true;
			isBase = false;
			
			var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
			var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
			var pGameModeStage = GameMode.Get("GameModeStage");
			var pBlackboardBattle = BlackboardBattle.Get();
			var sonicStateID = Player.State.GetCurrentStateID<Sonic.StateID>();
			
			Player.State.Redirect(Sonic.StateID.StateGuardedFlipBack, Sonic.StateID.StateAirBoost);
			
			if (!BlackboardStatus.IsSuper() && XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.PlayEffect("ss2burstwave", "ec_hs2_bo6160_burst01_wave01");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Sound.PlaySound("sn_chargecombo_air");
							Console.WriteLine("SS2 burst should be activated now.");
							
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");	
								
								soundPlayed = true;
							}
						if (XInput.GetTrigger(1) !> 0)
							{
								Player.Effect.StopEffect("ss2burstwave");
							}
						}
			if (IS_WORLD_FLAG(IsCyberSpace) && XInput.GetTrigger(1) > 0
				|| GameMode.GetName() == "GameModeTutorial" && XInput.GetTrigger(1) > 0)
				{
					
				}
			else
				{
					AuraLogic();
					//NewAuraLogic();
					HyperAnimations();
					SuperGPUParticles();
					SpinDashEffects();
				}
	
			Lua.Call("LoadLevel", "supersonic");
			
			{
				if (Player.GetPlayerType() != Player.PlayerType.Sonic)
						return;
			}
			
			if (!BlackboardStatus.IsSuper())
				{
					disableMeteor = false;
				}
				
			if (XInput.IsButtonDown(XInput.Buttons.A))
				{
					jumpFlightCheck = true;
					////Console.WriteLine("Jump flight check enabled...");
				}
				
			if (jumpFlightCheck)
				{
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump)
						{
							jumpFlightCheckHelper = true;
							////Console.WriteLine("Checking for right trigger press...");
						}
				}
				
			if (jumpFlightCheckHelper && XInput.GetTrigger(1) > 0)
					{
						////Console.WriteLine("Right trigger pressed!  Flight state activated!");
						flightCheck = true;
					}
			else if (XInput.IsButtonDown(XInput.Buttons.A) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && XInput.GetTrigger(1) > 0)
				{
					Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
				}
				
			
			
				
			if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly
				|| XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind)
					{
						hyperStandingBurstCheck = true;
						Console.WriteLine("Burst wave check has been activated.");
					}		
						
			if (!XInput.IsAnalogNeutral(0) || XInput.GetTrigger(1) > 0)
					{
						hyperStandingBurstCheck = false;
						Console.WriteLine("Burst wave exploded.");
					}
			
			if (XInput.GetTrigger(0) > 0 && flightCheck)
					{
						
						if (XInput.GetTrigger(1) > 0)
							{
								
								Player.State.Redirect(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateDriftAir);
								
								////Console.WriteLine("Sonic should be drifting now.");
								
								
							}
						if (XInput.IsAnalogNeutral(0))
							{
								Player.State.Redirect(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateSonicBoomKick);
							}
					}
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB)
				|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB)
				|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB))
					{
						if (pGameModeStage != null && flightBool)
							{
								Player.State.Redirect(Sonic.StateID.StateFly, Sonic.StateID.StateFly);
								Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFly);
							}
						////Console.WriteLine("Sonic should be flying now.");
						flightCheck = true;
					}
			
			if (flightCheck)
				{
					if (flightCheck && XInput.IsAnalogNeutral(0) && XInput.GetTrigger(1) > 0
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindRoot
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindJump
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFall)
							{
								////Console.WriteLine("Checking for RT press to activate flight");																
							
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingFall
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpring
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpecial
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpring
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingRoot
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving)
								{
									////Console.WriteLine("Diving should activate here.");
									Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDivingFall);
								}
							}
				}
				
			if (damageToggle == true && XInput.IsButtonDown(XInput.Buttons.BACK) && XInput.IsButtonDown(XInput.Buttons.X) && XInput.IsButtonDown(XInput.Buttons.Y))
				{
					damageToggle = false;
				}
			if (damageToggle == false && XInput.IsButtonDown(XInput.Buttons.BACK) && XInput.IsButtonDown(XInput.Buttons.X) && XInput.IsButtonDown(XInput.Buttons.Y))
				{
					damageToggle = true;
				}
			if (transImpactDamage && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
					
				{
					Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 1.0f);
				}
			if (transImpactDamage && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingAttack && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly)
					
				{
					Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 0.0f);
				}	
			if (!BlackboardStatus.IsSuper()  && isHyper || BlackboardStatus.IsSuper() && isHyper)
				{
					if (GameManager.GetGameObject("MainMenu") != null || GameManager.GetGameObject("MapMenu") != null)
						{
							break;
						}
					else
						{
							Console.WriteLine("Unpaused");
							BurstWave();
							BaseHyperVibrate();
						}
				}
			
			if (chargeSFX)
				{
					Player.Sound.PlaySound("sn_chargecombo_air");
					chargeSFX = false;
				}
			if (pBlackboardBattle == null)
				{
					return;
				}
				
			if (dummy)
				{
					pBlackboardBattle->PhantomRushAmount = 120.0f;
				}
										
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.Default)
				{
					Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning01");
					Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning02");
										
					Player.Effect.PlayEffect("boosting", "ef_pl_hit01_atk01");
				}			
			
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
					{
						if (trailOn && !BlackboardStatus.IsSuper())
							{
								Player.Effect.PlayEffect("line", "ec_so_stomp_locus01");
							}
						else
							{
								Player.Effect.StopEffect("line");
							}
					}
								
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							MiscLogic();
							if (!BlackboardStatus.IsSuper() || BlackboardStatus.IsSuper() && isHyper)
								{	
									if (isPaused == true)
											{
												HyperFlashLogic();
												MeteorDamageFix();
												BaseHyperVibrate();
												Console.WriteLine("Unpaused, move should work.");
											}
								}
						}
			
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
						||	hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
				if (isPaused == true)
				{
					DivingLogic();
				}
			if (freeDiveCheck == false)
				{
					FreeDiveStomp();
				}
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving && XInput.IsButtonDown(XInput.Buttons.A))
				{
					_flashLockOn3 = true;
										
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 0.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -150.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 900.0f);
							
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, -1.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, 15.0f);
				}
			else if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost && _flashLockOn3 && XInput.IsButtonDown(XInput.Buttons.A))
				{
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 60.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
																				
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 60.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
					_flashLockOn3 = false;
				}	
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_luminance, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineWidth, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineDisplayWidth, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineBlackEdgeWidth, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_color1.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].m_color1.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[2].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].m_color.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].m_color.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].m_color.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].m_color.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].m_color.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].m_color.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[2].m_color.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[2].m_color.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[2].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.startAngle, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.endSpeed, 2.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeed, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeedMax, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeed, 11.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeedMax, 11.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeedMax, 8.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeedMax, 60.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.accel, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.brake, 12.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerAngle, 70.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.steerAccel, 500.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerSpeed, 500.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.neutralSteerAccel, 1080.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxNeutralSteerSpeed, 15.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxRotateSpeed, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.recoverTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxChargeTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minDashSpeed, 60.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxDashSpeed, 80.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minDashJumpSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxDashJumpSpeed, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.jumpSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.checkFallTime, 2.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.minSpeed, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.accel, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageBrake, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageBrakeTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageMotionTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageInvicibleTime, 1.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damper, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airDamperV, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airDamperH, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.gravity, 50.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airJumpSpeed, 25.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.groundJumpSpeed, 19.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airAccel, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxAirAddSpeed, 100.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.downForceRate, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed1, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed2, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed3, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSteeringSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.endSteeringSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.staticStartSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.finishSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.finishTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.bigLandTime, 1.5f);
			
			break;
		}
		case "open_super":
		{
			isSuper = true;
			isBase = false;
			
			var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
			var pGameModeCyberStage = GameMode.Get("GameModeCyberStage");
			var pGameModeStage = GameMode.Get("GameModeStage");
			var pBlackboardBattle = BlackboardBattle.Get();
			var sonicStateID = Player.State.GetCurrentStateID<Sonic.StateID>();
			
			Player.State.Redirect(Sonic.StateID.StateGuardedFlipBack, Sonic.StateID.StateAirBoost);
			
			AuraLogic();
			HyperAnimations();
			BaseHyperVibrate();
			SuperGPUParticles();
			
			Lua.Call("LoadLevel", "supersonic");
			
			{
				if (Player.GetPlayerType() != Player.PlayerType.Sonic)
						return;
			}
			
			if (!BlackboardStatus.IsSuper())
				{
					disableMeteor = false;
				}
				
			if (flightCheck && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsButtonDown(XInput.Buttons.A) && !BlackboardStatus.IsSuper())
				{	
					Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFall);
				}
				
			if (XInput.IsButtonDown(XInput.Buttons.A))
				{
					jumpFlightCheck = true;
					////Console.WriteLine("Jump flight check enabled...");
				}
				
			if (jumpFlightCheck)
				{
					if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump)
						{
							jumpFlightCheckHelper = true;
							////Console.WriteLine("Checking for right trigger press...");
						}
				}
				
			if (jumpFlightCheckHelper && XInput.GetTrigger(1) > 0)
					{
						////Console.WriteLine("Right trigger pressed!  Flight state activated!");
						flightCheck = true;
					}
			else if (XInput.IsButtonDown(XInput.Buttons.A) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && XInput.GetTrigger(1) > 0)
				{
					Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
				}
				
			
			
				
			if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly
				|| XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind)
					{
							{
								hyperStandingBurstCheck = true;
								////Console.WriteLine("Burst wave check has been activated.");
							}
						if (!XInput.IsAnalogNeutral(0) || XInput.GetTrigger(1) !> 0)
							{
								hyperStandingBurstCheck = false;
								////Console.WriteLine("Burst wave exploded.");
							}
					}
			
			if (XInput.GetTrigger(0) > 0 && flightCheck)
					{
						
						if (XInput.GetTrigger(1) > 0)
							{
								Player.State.Redirect(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateDriftAir);
								
								////Console.WriteLine("Sonic should be drifting now.");
								
								
							}
						if (XInput.IsAnalogNeutral(0))
							{
								Player.State.Redirect(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateSonicBoomKick);
							}
					}
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateJump && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB)
				|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDoubleJump && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB)
				|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFall && !BlackboardStatus.IsSuper() && XInput.IsButtonDown(XInput.Buttons.LEFT_THUMB))
					{
						if (pGameModeStage != null && flightBool)
							{
								Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFly);
							}
						////Console.WriteLine("Sonic should be flying now.");
						flightCheck = true;
					}
			
			if (flightCheck)
				{
					if (flightCheck && XInput.IsAnalogNeutral(0) && XInput.GetTrigger(1) > 0
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrind
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindStep
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpringJump
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindRoot
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateGrindJump
						&& Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFall)
							{
								////Console.WriteLine("Checking for RT press to activate flight");																
							
							if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingFall
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpring
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpecial
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingSpring
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDivingRoot
								|| Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving)
								{
									////Console.WriteLine("Diving should activate here.");
									Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDivingFall);
								}
							}
				}
				
			
						
			if (transImpactDamage && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateHomingAttack)
					
				{
					////Console.WriteLine("Touch damage is enabled!");
					Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 1.0f);
				}
					
			if (!BlackboardStatus.IsSuper())
				{
					BurstWave();
				}
			
			if (chargeSFX)
				{
					Player.Sound.PlaySound("sn_chargecombo_air");
					chargeSFX = false;
				}
			if (pBlackboardBattle == null)
				{
					return;
				}
				
			if (dummy)
				{
					pBlackboardBattle->PhantomRushAmount = 120.0f;
				}
										
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.Default)
				{
					Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning01");
					Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning02");
										
					Player.Effect.PlayEffect("boosting", "ef_pl_hit01_atk01");
				}			
			
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
					{
						if (trailOn && !BlackboardStatus.IsSuper())
							{
								Player.Effect.PlayEffect("line", "ec_so_stomp_locus01");
							}
						else
							{
								Player.Effect.StopEffect("line");
							}
					}
								
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							MiscLogic();
						}
			
			if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
						||	hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
				{
					DivingLogic();
				}
			if (freeDiveCheck == false)
				{
					FreeDiveStomp();
				}
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDiving && XInput.IsButtonDown(XInput.Buttons.A))
				{
					_flashLockOn3 = true;
										
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 0.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -150.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 900.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 900.0f);
							
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, -1.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, 15.0f);
				}
			else if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateAirBoost && _flashLockOn3 && XInput.IsButtonDown(XInput.Buttons.A))
				{
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.minHSpeedMax, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startHSpeedMax, 60.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.gravityRate, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
																				
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeed, 15.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.minHSpeedMax, 20.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startHSpeedMax, 60.0f);
										
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.gravityRate, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.airboost.startVSpeed, -0.000000000100000001335143196001808973960578441619873046875f);
					_flashLockOn3 = false;
				}		
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_luminance, 1.0f);
					
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[1].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_transparentLines[0].m_luminance, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineWidth, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineDisplayWidth, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_crossline.lineBlackEdgeWidth, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[0].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].cyloopSlashEffectBaseParameter.m_scale.X, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locus.m_opaqueLines[1].cyloopSlashEffectBaseParameter.m_scale.Y, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.startAngle, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.endSpeed, 2.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeed, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minSpeedMax, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeed, 11.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSpeedMax, 11.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minBoostSpeedMax, 8.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxBoostSpeedMax, 60.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.accel, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.brake, 12.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerAngle, 70.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.steerAccel, 500.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxSteerSpeed, 500.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.neutralSteerAccel, 1080.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxNeutralSteerSpeed, 15.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxRotateSpeed, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.recoverTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxChargeTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minDashSpeed, 60.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxDashSpeed, 80.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.minDashJumpSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.maxDashJumpSpeed, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.jumpSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.drift.checkFallTime, 2.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxSpeed, 30.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.minSpeed, 5.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageSpeed, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.accel, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageBrake, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageBrakeTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageMotionTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damageInvicibleTime, 1.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.damper, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airDamperV, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airDamperH, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.gravity, 50.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airJumpSpeed, 25.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.groundJumpSpeed, 19.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.airAccel, 20.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.maxAirAddSpeed, 100.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.downForceRate, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed1, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed2, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.steeringSpeed3, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSteeringSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.endSteeringSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.startSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.staticStartSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.finishSlope, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.finishTime, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, cyberspace.boarding.bigLandTime, 1.5f);
			
			
			
			break;
		}
	}
    switch (_auraMode)
    {
    case ".":
	{
		
		var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
		var pGameModeCyberStage = GameMode.Get("GameModeStage");
		
		
		
		BaseHyperVibrate();
		
		
		hyperTrans = false;
			if (BlackboardStatus.IsSuper())
				{
					disableMeteor = true;
				}
		
		if (SonicParametersInfo.pData == null)
			return;
		RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.R, 1.0f);
        RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.G, 0.7f);
        RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.B, 0.2f);
		break;
	}
	case "final_hyper_2":
        {
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStandRoot)
			{
				baseCrashFix = true;
			}
			
			
			if (baseCrashFix)
				{
				var playerData = Player.GetPlayerData();
				var gocVisual = GameObject.GetGOC<GOCPlayerVisual>(&playerData->GameObject);
				var visual = gocVisual->GetVisual<VisualSuperSonic>();
				
				var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
				
					if (visual == null)
						return;
					
					if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
						||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
							||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
								{
									if (visual->IsSuperSonic2 && baseCrashFix)
										{
											HyperFlashLogic();
											MeteorDamageFix();
										}
								}			
					
					
					hyperBurstWaveCheck = true;
					
					if (SonicParametersInfo.pData == null)
						return;
					RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.B, 1.0f);
				}
			break;
		}
	case "final_hyper_2_cc":
        {
			if (baseCrashFix)
				{
					var playerData = Player.GetPlayerData();
					var gocVisual = GameObject.GetGOC<GOCPlayerVisual>(&playerData->GameObject);
					var visual = gocVisual->GetVisual<VisualSuperSonic>();
					
					var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
					
						if (visual == null)
							return;
						
						if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
							||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
								||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
									{
										if (visual->IsSuperSonic2 && baseCrashFix)
											{
												HyperFlashLogic();
												MeteorDamageFix();
											}
										}			
						hyperBurstWaveCheck = true;
							
						if (SonicParametersInfo.pData == null)
						return;
						RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.R, 1.0f);
						RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.G, 0.0f);
						RFL_SET_PARAM(SonicParametersInfo, common.supersonic.auraColor2.B, 1.0f);
				}
				
				break;
		}
	}
	switch (_auraMode1)
    {
    case ".":
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	// do phys_on stuff
	
	if (auraActive)	
		{
			const float DefaultDeclineSpeed = -500.0f;
			const float SuperDeclineSpeed = 7.0f;
			const float SuperDeclineSpeedAccele = 20.0f;
			
			
			
			// Set default values
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeed, DefaultDeclineSpeed);
			Player.Sound.PlaySound("sn_supersonic");
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeedAccele, DefaultDeclineSpeed);

			if (auraActive && BlackboardStatus.IsSuper())
			{
				// Use SuperDeclineSpeed when both auraActive and BlackboardStatus.IsSuper() are true
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeed, SuperDeclineSpeed);
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeedAccele, SuperDeclineSpeedAccele);
				
			}
		}
	if (SonicParametersInfo.pData == null)
		return;
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.G, 0.7f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.B, 0.2f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.G, 0.7f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.B, 0.2f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.G, 0.7f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.B, 0.2f);

			
			break;
		}
	case "boss_hyper":
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	var pGameModeCyberStage = GameMode.Get("GameModeStage");
	
	hyperBurstWaveCheck = true;
	
	BaseHyperVibrate();
	
	superAuraFix = true;
		if (BlackboardStatus.IsSuper())
			{
				if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.PlayEffect("ss2burstwave", "ec_ss_bo6160_burst01_wave01");
							Player.Sound.PlaySound("sn_chargecombo_air");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
											
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");	
								soundPlayed = true;
							}
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");
								soundPlayed = true;
							}
						}
				else
					{
						if (soundPlayed && hyperStandingBurstCheck == false && !XInput.IsAnalogNeutral(0))
						{
								Player.Effect.PlayEffect("ss2burst", "ec_ss2_bo6160_burst02_lightning01");
								Player.Sound.PlaySound("sn_ringmax");
								Player.Sound.PlaySound("sn_lightdash");
								Player.Effect.PlayEffect("waveshake", "ec_ft_damage_down01_sa01_shake01");
								Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 50.0f);
								hyperStandingBurstCheck = true;
						}					
								soundPlayed = false;
					}
			}
	{								
		{
			var pBlackboardBattle = BlackboardBattle.Get();

			if (pBlackboardBattle == null)
				{
					return;
				}
	if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							if (BlackboardStatus.IsSuper())
								{
									HyperFlashLogic();
									MeteorDamageFix();
								}
						}							
	if (dummy)
		{
			pBlackboardBattle->PhantomRushAmount = 120.0f;
		}
														
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.Default)
			{
				Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning01");
				Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning02");
												
				Player.Effect.PlayEffect("boosting", "ef_pl_hit01_atk01");
			}		
		}
	}			
    if (!BlackboardStatus.IsSuper())
				{
					hyperTrans = false;
					disableMeteor = true;
				}
			if (BlackboardStatus.IsSuper())
				{
					hyperTrans = true;
					disableMeteor = false;
				}
	
	// Define a variable to track if FadeIn/FadeOut has been triggered

// ...

else if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateParry && hyperFlash && _flashLockOn4 && XInput.IsButtonDown(XInput.Buttons.Y))
{
        
    // Trigger FadeOut only if it hasn't been triggered before
    if (!fadeInOutTriggered)
    {

        Player.State.Redirect(Sonic.StateID.StateFall, Sonic.StateID.StateFall);

        
        

        Player.Collision.SetEntityCollision(true);
        _flashLockOn = false;

        // Set the trigger to true to prevent subsequent triggering
        fadeInOutTriggered = true;
    }
}
else
{
    // Reset the trigger when Y button is not pressed
    fadeInOutTriggered = false;
}

	
	
	
	if (disableMeteor == false)
{
    float driftDashActivationTimer = 0.0f;
    DateTime startTime = DateTime.Now; // Initialize startTime

    // ...

    var sonicStateID = Player.State.GetCurrentStateID<Sonic.StateID>();

    // Declare the variable outside the class or method to store the last time X button was released
    DateTime xButtonReleasedTime = DateTime.MinValue;

    // ... (rest of your code)

    // Inside your update or main loop
    float elapsedTime = (float)(DateTime.Now - startTime).TotalSeconds;

    // Check if StateDriftDash should be activated after 1 second
    if (_flashLockOn4 && driftDashActivationTimer < 1.0f)
    {
        driftDashActivationTimer += elapsedTime;
    }
    else if (_flashLockOn4 && driftDashActivationTimer >= 1.0f)
    {
        Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDriftDash);
    }

}
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color0.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color0.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color0.B, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color1.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color1.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color1.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color0.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color0.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color0.B, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color1.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color1.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color1.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color0.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color0.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color0.B, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color1.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color1.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color1.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[0].m_color.R, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[0].m_color.G, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[0].m_color.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[1].m_color.R, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[1].m_color.G, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[1].m_color.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[2].m_color.R, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[2].m_color.G, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[2].m_color.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color0.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color0.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color0.B, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color1.R, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color1.G, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color1.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color0.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color0.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color0.B, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color1.R, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color1.G, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color1.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color0.R, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color0.G, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color0.B, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color1.R, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color1.G, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color1.B, 1.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.startWait, 0.2f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[0], 0.12f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[1], 0.24f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[2], 0.36f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[3], 0.48f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[4], 0.6f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[0], 70.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[1], -90.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[2], 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[3], 90.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[4], 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[0], 5.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[1], 3.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[2], 3.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[3], 3.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[4], 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceMax, 90.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.zigzagBeginOneStepTime, 0.08f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.zigzagEndOneStepTime, 0.07f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.crasherSpeed, -4.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.failSafeTime, 2.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraDistance, 9.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraOffsetElevation, 3.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraOffsetAzimuth, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraRoll, 0.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.chargeTime, 0.3f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.homingSpeed, -1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.bounceTime, 0.1f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.radius, 2.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.slashTime, 1.68f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.numSlashs, 6);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.angle, 8.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.lastHitTime, 1.4f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.slowRatio0, 0.4f);
					RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.slowRatio1, 0.1f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.ignoreSwingingTime, 1.2f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.riseSlowRatio, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.riseTime, 1.2f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.riseDistance, 10.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.preRiseDistance, 1.3f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.postRiseDistance, 13.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.lastVelocity, 4.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralRadius, 1.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralRadiusEaseInTime, 0.4f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralRadiusEaseOutTime, 0.64f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralAngularSpeed, 1440f);
					RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.lastHitTime, 1.05f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.riseTime, 0.3f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.flipSpeed, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.motionTime, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.lastHitTime, 0.9f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.slowRatio, 0.02f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.minPressTime, 0.2f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.minPressTimeHeight, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.maxPressTime, 1.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.maxPressTimeHeight, 2.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.waitTime, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.spanTime, 0.08f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.fallSpeed, 0.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.autoContinueTime, 0.1f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.speed, 45.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.maxSpeed, 45.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.accele, 55f);
					RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.slowRatio, 0.1f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spanTime, 0.08f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.attackTime, 1.6f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.moveAngle, -180.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.stopTime, 1.6f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.slowRatio, 0.05f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spinPhase, -340.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spinRadius, 1.5f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spinSpeed, 1080.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.speed, 50.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.maxSpeed, 50.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.accele, 50.0f);
					
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.appearTime, 0.1f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.appearPhaseTime, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spinRadius, 1.7f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spinSpeed, -105.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spinSpeedPostLaunch, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.chargeTime, 0.15f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spawnTime, 0.1f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchPreWaitTime, 0.18f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spanTime, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchRandomize, false);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchWaitTime, 0.1f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.beginAngleX, 67.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.tangent0, 36.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.tangent1, 76.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralWaitTime, 0.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralAngularSpeed, 48.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralAngularSpeedMax, 48.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralAngularSpeedAccele, 48.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.numShots, 15);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.speed, 48.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.maxSpeed, 48.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.accele, 105.0f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutBeginTime, 0.47f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadeOutTime, 0.3f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadingTime, 0.2f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadeInTime, 0.15f);
					RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.cameraName, null);
					break;
				}
			case "boss_hyper_cc":
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	var pGameModeCyberStage = GameMode.Get("GameModeStage");
	
	hyperBurstWaveCheck = true;
	
	BaseHyperVibrate();
	
	superAuraFix = true;
		if (BlackboardStatus.IsSuper())
			{
				if (XInput.GetTrigger(1) > 0 && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && XInput.IsAnalogNeutral(0) && hyperStandingBurst)
						{
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.PlayEffect("ss2burstwave", "ec_ss_bo6160_burst01_wave01");
							Player.Sound.PlaySound("sn_chargecombo_air");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
							Player.Effect.StopEffect("ss2burstwave");
											
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");	
								soundPlayed = true;
							}
						if (!soundPlayed)
							{
								Player.Effect.StopEffect("ss2burstwave");
								soundPlayed = true;
							}
						}
				else
					{
						if (soundPlayed && hyperStandingBurstCheck == false && !XInput.IsAnalogNeutral(0))
						{
								Player.Effect.PlayEffect("ss2burst", "ec_ss2_bo6160_burst02_lightning01");
								Player.Sound.PlaySound("sn_ringmax");
								Player.Sound.PlaySound("sn_lightdash");
								Player.Effect.PlayEffect("waveshake", "ec_ft_damage_down01_sa01_shake01");
								Console.WriteLine("Standing burst active!");
								Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 50.0f);
						}					
								soundPlayed = false;
					}
			}
	{								
		{
			var pBlackboardBattle = BlackboardBattle.Get();

			if (pBlackboardBattle == null)
				{
					return;
				}
	if (hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic
				||	hyperLock && Player.GetPlayerType() != Player.PlayerType.Sonic
					||	!hyperLock && Player.GetPlayerType() == Player.PlayerType.Sonic)
						{
							if (BlackboardStatus.IsSuper())
								{
									HyperFlashLogic();
									MeteorDamageFix();
								}
						}							
	if (dummy)
		{
			pBlackboardBattle->PhantomRushAmount = 120.0f;
		}
														
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.Default)
			{
				Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning01");
				Player.Effect.PlayEffect("boosting", "ec_ss_aura01_default_lightning02");
												
				Player.Effect.PlayEffect("boosting", "ef_pl_hit01_atk01");
			}		
		}
	}			
    if (!BlackboardStatus.IsSuper())
				{
					hyperTrans = false;
					disableMeteor = true;
				}
			if (BlackboardStatus.IsSuper())
				{
					hyperTrans = true;
					disableMeteor = false;
				}
	
	// Define a variable to track if FadeIn/FadeOut has been triggered

// ...

else if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateParry && hyperFlash && _flashLockOn4 && XInput.IsButtonDown(XInput.Buttons.Y))
{
        
    // Trigger FadeOut only if it hasn't been triggered before
    if (!fadeInOutTriggered)
    {

        Player.State.Redirect(Sonic.StateID.StateFall, Sonic.StateID.StateFall);

        
        

        Player.Collision.SetEntityCollision(true);
        _flashLockOn = false;

        // Set the trigger to true to prevent subsequent triggering
        fadeInOutTriggered = true;
    }
}
else
{
    // Reset the trigger when Y button is not pressed
    fadeInOutTriggered = false;
}

	
	
	
	if (disableMeteor == false)
{
    float driftDashActivationTimer = 0.0f;
    DateTime startTime = DateTime.Now; // Initialize startTime

    // ...

    var sonicStateID = Player.State.GetCurrentStateID<Sonic.StateID>();

    // Declare the variable outside the class or method to store the last time X button was released
    DateTime xButtonReleasedTime = DateTime.MinValue;

    // ... (rest of your code)

    // Inside your update or main loop
    float elapsedTime = (float)(DateTime.Now - startTime).TotalSeconds;

    // Check if StateDriftDash should be activated after 1 second
    if (_flashLockOn4 && driftDashActivationTimer < 1.0f)
    {
        driftDashActivationTimer += elapsedTime;
    }
    else if (_flashLockOn4 && driftDashActivationTimer >= 1.0f)
    {
        Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateDriftDash);
    }

}
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[0].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[1].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_opaqueLines[2].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[0].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[1].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonic.m_transparentLines[2].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[0].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[0].m_color.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[0].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[1].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[1].m_color.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[1].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[2].m_color.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[2].m_color.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_opaqueLines[2].m_color.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[0].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[1].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color0.R, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color0.G, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color0.B, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color1.R, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color1.G, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.locusSuperSonicQuick.m_transparentLines[2].m_color1.B, 1.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopRadius, 70.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopTime, 0.6f);
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopSpeedCurveRatio, 0.175f);
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopEndStopTime, 0.001f);
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.loopEndSpeed, 8.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.kickSpeed, 280.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.loopKickSet.superSonic1.failSafeTime, 1.6f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.startWait, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[0], 0.12f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[1], 0.24f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[2], 0.36f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[3], 0.48f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceRatios[4], 0.6f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[0], 70.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[1], -90.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[2], 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[3], 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.angles[4], 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[0], 5.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[1], 3.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[2], 3.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[3], 3.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.radii[4], 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.distanceMax, 90.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.zigzagBeginOneStepTime, 0.08f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.zigzagEndOneStepTime, 0.07f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.crasherSpeed, -4.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.failSafeTime, 2.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraDistance, 9.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraOffsetElevation, 3.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraOffsetAzimuth, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crasherSet.superSonic1.cameraRoll, 0.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.chargeTime, 0.3f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.homingSpeed, -1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.bounceTime, 0.1f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.radius, 2.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.slashTime, 1.68f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.numSlashs, 6);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.angle, 8.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.lastHitTime, 1.4f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.slowRatio0, 0.4f);
			RFL_SET_PARAM(SonicParametersInfo, common.spinSlashSet.superSonic1.slowRatio1, 0.1f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.ignoreSwingingTime, 1.2f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.riseSlowRatio, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.riseTime, 1.2f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.riseDistance, 10.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.preRiseDistance, 1.3f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.postRiseDistance, 13.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.lastVelocity, 4.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralRadius, 1.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralRadiusEaseInTime, 0.4f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralRadiusEaseOutTime, 0.64f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.spiralAngularSpeed, 1440f);
			RFL_SET_PARAM(SonicParametersInfo, common.chargeAtackSet.superSonic1.lastHitTime, 1.05f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.riseTime, 0.3f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.flipSpeed, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.motionTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.lastHitTime, 0.9f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.slowRatio, 0.02f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.minPressTime, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.minPressTimeHeight, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.maxPressTime, 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.stompingAttackSet.superSonic1.maxPressTimeHeight, 2.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.waitTime, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.spanTime, 0.08f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.fallSpeed, 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.autoContinueTime, 0.1f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.speed, 45.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.maxSpeed, 45.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.accele, 55f);
			RFL_SET_PARAM(SonicParametersInfo, common.sonicboomSet.superSonic1.slowRatio, 0.1f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spanTime, 0.08f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.attackTime, 1.6f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.moveAngle, -180.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.stopTime, 1.6f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.slowRatio, 0.05f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spinPhase, -340.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spinRadius, 1.5f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.spinSpeed, 1080.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.speed, 50.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.maxSpeed, 50.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.crossSlashSet.superSonic1.accele, 50.0f);
			
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.appearTime, 0.1f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.appearPhaseTime, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spinRadius, 1.7f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spinSpeed, -105.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spinSpeedPostLaunch, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.chargeTime, 0.15f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spawnTime, 0.1f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchPreWaitTime, 0.18f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spanTime, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchRandomize, false);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.launchWaitTime, 0.1f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.beginAngleX, 67.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.tangent0, 36.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.tangent1, 76.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralWaitTime, 0.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralAngularSpeed, 48.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralAngularSpeedMax, 48.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.spiralAngularSpeedAccele, 48.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.numShots, 15);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.speed, 48.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.maxSpeed, 48.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.accele, 105.0f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutBeginTime, 0.47f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadeOutTime, 0.3f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadingTime, 0.2f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.whiteoutFadeInTime, 0.15f);
			RFL_SET_PARAM(SonicParametersInfo, common.homingShotSet.superSonic1.cameraName, null);
			
			break;
		}
	
    }
	if (disableDamage)
		{
		WriteProtected<byte>
		(
			/* 0x140915C52 */
			ScanSignature
			(
				"\x0F\x84\x64\x01\x00\x00\x83\xEA\x02",
				"xxxxxxxxx"
			),

			0xE9, 0x80, 0x00, 0x00, 0x00
		);
		
		
	}
	
{

		if (!initialized)
		{
			var mods = HMM.FindModsByName("Super/Hyper Sonic Ultimate");
			
			if (mods.Count == 1)
			{
				currentModDirectory = mods[0].Path;
				string modConfigIniPath = System.IO.Path.Combine(mods[0].Path, "mod.ini");
				var ini = INI.Read(modConfigIniPath);

				attackActive = bool.Parse(ini["Main"]["attackActive"]);
				auraActive = bool.Parse(ini["Main"]["auraActive"]);
				disableDamage = bool.Parse(ini["Main"]["disableDamage"]);
				hyperStompCameraShake = bool.Parse(ini["Main"]["hyperStompCameraShake"]);
				hyperFlashCameraShake = bool.Parse(ini["Main"]["hyperFlashCameraShake"]);
				hyperFlash = bool.Parse(ini["Main"]["hyperFlash"]);
				hyperFlashDamage = bool.Parse(ini["Main"]["hyperFlashDamage"]);
				hyperFlashWhiteOut = bool.Parse(ini["Main"]["hyperFlashWhiteOut"]);
				hyperFlashExplosion = bool.Parse(ini["Main"]["hyperFlashExplosion"]);
				flashFade = bool.Parse(ini["Main"]["flashFade"]);
				hyperStomp = bool.Parse(ini["Main"]["hyperStomp"]);
				hyperStompExtendDamage = bool.Parse(ini["Main"]["hyperStompExtendDamage"]);
				hyperSpinDash = bool.Parse(ini["Main"]["hyperSpinDash"]);
				hyperSpinBoostCamera = bool.Parse(ini["Main"]["hyperSpinBoostCamera"]);
				hyperSpinBoostChargeCamera = bool.Parse(ini["Main"]["hyperSpinBoostChargeCamera"]);
				vibrationOn = bool.Parse(ini["Main"]["vibrationOn"]);
				trailOn = bool.Parse(ini["Main"]["trailOn"]);
				burstTrailOn = bool.Parse(ini["Main"]["burstTrailOn"]);
				hyperLock = bool.Parse(ini["Main"]["hyperLock"]);
				hyperStandingBurst = bool.Parse(ini["Main"]["hyperStandingBurst"]);
				chaosMeteor = bool.Parse(ini["Main"]["chaosMeteor"]);
				transImpactDamage = bool.Parse(ini["Main"]["transImpactDamage"]);
				flightBool = bool.Parse(ini["Main"]["flightBool"]);
				superSonicGPU = bool.Parse(ini["Main"]["superSonicGPU"]);
				
			}
			else
			{
				//Console.WriteLine($"[Super/Hyper Sonic Ultimate] Failed to locate mod directory.");
				return;
			}

			initialized = true;
		}
	}
}

Patch "Reduced Homing Delay" in "Physics" by "Hyper" does "Reduces the delay after performing a homing attack, allowing you to perform chained homing attacks much quicker." 
//
    static float Delay = 0.2f;
//
{
    fixed (float* pDelay = &Delay)
    {
        WriteAsmHook
        (
            $@"
                push  rbx
                mov   rbx, {(long)pDelay}
                movss xmm2, dword ptr [rbx]
                mov   edx, eax
                mov   rcx, r13
                mov   dword ptr [rbp + 0x57 + 0x28], eax
                pop   rbx
            ",

            /* 0x14082379C */
            ScanSignature
            (
                "\xF3\x41\x0F\x10\x54\x3F\x18",
                "xxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}

Patch "Fix Grind Leaning" in "Fixes" by "Hyper" does "Fixes the grind leaning animations always leaning left and ending prematurely when leaning right." 
//
    static float Bias = 1.0f;
//
{
    fixed (float* pBias = &Bias)
    {
        WriteAsmHook
        (
            $@"
                mov   rdx, {(long)pBias}
                movss xmm2, dword ptr [rdx]
                movss dword ptr [rsi + 0xD8], xmm0
                mov   rdx, {(long)System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi("SPEED_RATIO")}
            ",

            /* 0x14084AD71 */
            ScanSignature
            (
                "\x0F\x28\xD0\xF3\x0F\x11\x86\xD8\x00\x00\x00",
                "xxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}
Patch "Disable Decelerate Collision" in "Physics" by "Hyper" does 
/*
Disables the collision flag that kills all horizontal velocity when jumping.

Example usage;
- The bridge in Kronos above the river.
- The cliffsides in Ares.
*/
//
    static int Seek = 0;
//
{
    fixed (int* pSeek = &Seek)
    {
        WriteAsmHook
        (
            $@"
                mov  r14, qword ptr [rsp + 0x48 + 0xFFFFFFFFFFFFFFD8]
                mov  rdi, qword ptr [rsp + 0x48 + 0xFFFFFFFFFFFFFFE0]
                mov  rsi, qword ptr [rsp + 0x48 + 0xFFFFFFFFFFFFFFE8]
                push rbx
                push rcx
                push rdx
                push r11
                push r15
                mov  rdx, {(long)pSeek}
                mov  rbx, rax
                mov  rbx, [rbx]               ; dereference pointer to collision info map [int64, int32]
                test rbx, rbx                 ; check if null
                jz   exit
                mov  ecx, dword ptr [rbx + 8] ; store vertex count
                imul ecx, 4                   ; multiply vertex count by 4 to get an appropriate iteration size
                mov  rbx, [rbx]               ; dereference pointer to collision info
            iterate:
                cmp  dword ptr [rdx], ecx     ; iterate through vertices to set info for each
                jge  exit
                mov  r15d, dword ptr [rdx]    ; store current iteration
                mov  r11, rbx
                add  r11, r15                 ; add offset to address
                mov  r15d, dword ptr [r11]    ; store current collision info for modification
                and  r15d, 0xFFFFFDFF         ; clear 9th bit
                mov  dword ptr [r11], r15d    ; store modified collision info in original array
                add  dword ptr [rdx], 4       ; increment by 4 (32-bit integers)
                jmp  iterate
            exit:
                mov  dword ptr [rdx], 0       ; reset incrementation
                pop  r15
                pop  r11
                pop  rdx
                pop  rcx
                pop  rbx
            ",

            /* 0x140A9FBF3 */
            ScanSignature
            (
                "\x4C\x8B\x74\x24\x20\x48\x8B\x7C\x24\x28\x48\x8B\x74\x24\x30\x48\x8B\x00",
                "xxxxxxxxxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}

Code "Retain Velocity When Jumping Up Slopes" in "Physics" by "Weezley" does "Retains the current ground velocity when jumping from a steep slope."
//
    #include "Reflection" noemit

    #lib "Reflection"
    #lib "SonicParameters"
//
{
    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

    if (SonicParametersInfo.pData == null)
        return;

    RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jumpSpeed.limitUpSpeed, 40.0f);
}
Patch "Always Unlocked Arcade Mode" in "! Incompatible - awaiting fixes for v1.40" by "Hyper" 
{
    WriteNop
    (
        /* 0x1409756D0 */
        ScanSignature
        (
            "\x74\x57\x4C\x8B\x73\x08\xBA\x08\x01\x00\x00\x41\xB8\x08\x00\x00\x00\x49\x8B\xCE",
            "xxxxxxxxxxxxxxxxxxxx"
        ),

        2
    );
}